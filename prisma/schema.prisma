generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  bio           String?
  age           Int?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  task          Task[]
  habit         Habit[]
  notes         Note[]
  meters        Meter[]
  questions     Question[]
  metrics       Metric[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String    @id @default(cuid())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  description String?
  dueAt       DateTime?
  habitId     String?
  tags        Tag[]
  title       String
  updatedAt   DateTime  @updatedAt
  userId      String
  habit       Habit?    @relation(fields: [habitId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  tasks   Task[]
  notes   Note[]
  meters  Meter[]
  metrics Metric[]
}

model Habit {
  id           String @id @default(cuid())
  frequency    String @default("WEEKLY")
  streak       Int    @default(0)
  originTaskId String
  tasks        Task[]
  userId       String
  user         User   @relation(fields: [userId], references: [id])
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tags      Tag[]
  title     String
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Meter {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tags      Tag[]
  title     String
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  type      String
  reference String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Metric {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]
  value     Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
